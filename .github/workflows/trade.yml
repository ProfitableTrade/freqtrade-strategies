name: Trade
on:
  workflow_dispatch:
    inputs:
      env_name:
        description: "Environment name of trade"
        required: true
        default: trade01
        type: choice
        options:
          - trade01
          - trade02
          - trade03
          - trade04
          - trade05
          - trade06
          - trade07
          - trade08
          - trade09
          - trade10
          - trade11
          - trade12
          - trade13
          - trade14
          - trade15
          - trade16
          - trade17
          - trade18
          - trade19
          - trade20
      behaviour:
        description: "Behaviour"
        required: true
        default: "start"
        type: choice
        options:
          - start
          - stop
      strategy:
        description: "Strategy, example: Strategy0"
        required: true
        default: Strategy00
        type: choice
        options:
          - Strategy00
          - Strategy00_SL
          - Strategy00_SL_INJUSDT
          - Strategy00_SL_LUNCUSDT
          - Strategy00_SL_PHBUSDT
          - CrossEMAStrategy
          - CustomStoplossWithPSAR
          - HourBasedStrategy
          - Strategy00plus
          - Strategy00plus1
      pair:
        description: "Pair, example: SOL/USDT"
        required: true
        type: choice
        default: SOL/USDT
        options:
          - SOL/USDT
          - INJ/USDT
          - KAVA/USDT
          - LUNC/USDT
          - BTC/USDT
          - ETH/USDT
          - PHB/USDT
          - DOT/USDT
          - ADA/USDT
          - LINK/USDT
          - XRP/USDT
          - LTC/USDT
          - BCH/USDT
          - BNB/USDT
          - EOS/USDT
          - TRX/USDT
          - XLM/USDT
          - ETC/USDT
          - XTZ/USDT
          - NEO/USDT
          - ATOM/USDT
          - IOTA/USDT
          - VET/USDT
          - XMR/USDT
          - DASH/USDT
          - ZEC/USDT
          - QTUM/USDT
          - THETA/USDT
          - FIL/USDT
          - UNI/USDT
          - AAVE/USDT
          - COMP/USDT
          - MKR/USDT
          - SNX/USDT
          - YFI/USDT
          - SUSHI/USDT
          - ZRX/USDT
          - KNC/USDT
          - BAND/USDT
          - REN/USDT
          - BAL/USDT
          - OXT/USDT
          - CRV/USDT
          - TRB/USDT
          - UMA/USDT
          - NMR/USDT
          - ANT/USDT
          - LRC/USDT
          - CVC/USDT
          - KAVA/USDT
          - AR/USDT
          - GRT/USDT
          - STORJ/USDT
          - SNM/USDT
          - CTK/USDT
          - BNT/USDT
          - GNO/USDT
          - REP/USDT
          - MLN/USDT
          - CRV/USDT
          - STORJ/USDT
          - SNM/USDT
          - CTK/USDT
          - BNT/USDT
          - GNO/USDT
          - REP/USDT
          - MLN/USDT
          - CRV/USDT
      runtime_type:
        description: "dry-run - fake trades, production - real money"
        required: true
        default: dry-run
        type: choice
        options:
          - dry-run
          - production
      dry_run_wallet:
        description: "Dry run wallet amount"
        required: false
        default: "3000"
      config:
        description: "Config, example: binance"
        required: true
        type: choice
        default: binance
        options:
          - binance
          - binance1
      timeframe:
        description: "Timeframe"
        required: true
        type: choice
        default: "1h"
        # do not change, binance works with this list of timeframes only 
        options: ['1s', '1m', '3m', '5m', '15m', '30m', '1h', '2h', '4h', '6h', '8h', '12h', '1d', '3d', '1w', '1M']
      max_open_trades:
        description: "Max open trades"
        required: false
        default: 1
        type: number
      stoploss:
        description: "Stoploss"
        required: true
        default: 0.05
        type: number
      # cancel_open_orders_on_exit:
      #   description: "Cancel open orders on exit"
      #   required: false
      #   type: boolean
      #   default: false
      # telegram:
      #   description: "Telegram bot, work on only one bot"
      #   required: false
      #   type: boolean
      #   default: false

jobs:
  trade:
    runs-on: ubuntu-latest
    env:
      REMOTE_SERVER: root@${{ secrets.REMOTE_SERVER }}
    steps:
      #------------------------------------------------------------
      # Checkout the repository
      #------------------------------------------------------------
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
          submodules: true

      #------------------------------------------------------------
      # Info
      #------------------------------------------------------------
      - name: 📝 Info 📝
        run: |
          echo "|KEY               | VALUE                         |" >> $GITHUB_STEP_SUMMARY
          echo "|------------------|-------------------------------|" >> $GITHUB_STEP_SUMMARY
          echo "|Environment name: | ${{ inputs.env_name }}        |" >> $GITHUB_STEP_SUMMARY
          echo "|Behaviour:        | ${{ inputs.behaviour }}       |" >> $GITHUB_STEP_SUMMARY
          echo "|Strategy:         | ${{ inputs.strategy }}        |" >> $GITHUB_STEP_SUMMARY
          echo "|Dry run:          | ${{ inputs.runtime_type }}    |" >> $GITHUB_STEP_SUMMARY
          echo "|Dry run wallet:   | ${{ inputs.dry_run_wallet }}  |" >> $GITHUB_STEP_SUMMARY
          echo "|Config:           | ${{ inputs.config }}          |" >> $GITHUB_STEP_SUMMARY
          echo "|Pair:             | ${{ inputs.pair }}            |" >> $GITHUB_STEP_SUMMARY
          echo "|Timeframe:        | ${{ inputs.timeframe }}       |" >> $GITHUB_STEP_SUMMARY
          echo "|Max open trades:  | ${{ inputs.max_open_trades }} |" >> $GITHUB_STEP_SUMMARY
          echo "|Stoploss:         | ${{ inputs.stoploss }}        |" >> $GITHUB_STEP_SUMMARY
          echo "|Cancel open orders on exit: | ${{ inputs.cancel_open_orders_on_exit }} |" >> $GITHUB_STEP_SUMMARY
          echo "|Telegram:         | ${{ inputs.telegram }}        |" >> $GITHUB_STEP_SUMMARY

      #------------------------------------------------------------
      # Install rsync
      #------------------------------------------------------------
      - name: Install rsync
        run: |
          sudo apt-get install -y rsync
          sudo apt-get install -y jq

      #------------------------------------------------------------
      # Create ssh private key
      #------------------------------------------------------------
      - name: 🔑 Prepare ssh private key 🔑
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ./id_rsa
          chmod 600 ./id_rsa

      #------------------------------------------------------------
      # Change config file
      #------------------------------------------------------------
      - name: Change config file ${{ inputs.config }}.json
        run: |
          jq '.exchange.key = "${{ secrets.BINANCE_API }}"' "./user_data/${{ inputs.config }}.json" > tmp-config.json && mv tmp-config.json "./user_data/${{ inputs.config }}.json"
          jq '.exchange.secret = "${{ secrets.BINANCE_SECRET_KEY }}"' "./user_data/${{ inputs.config }}.json" > tmp-config.json && mv tmp-config.json "./user_data/${{ inputs.config }}.json"
          jq '.exchange.pair_whitelist[0] = "${{ inputs.pair }}"' "./user_data/${{ inputs.config }}.json" > tmp-config.json && mv tmp-config.json "./user_data/${{ inputs.config }}.json"
          jq '.strategy.timeframe = "${{ inputs.timeframe }}"' "./user_data/${{ inputs.config }}.json" > tmp-config.json && mv tmp-config.json "./user_data/${{ inputs.config }}.json"
          jq '.timeframe = "${{ inputs.timeframe }}"' "./user_data/${{ inputs.config }}.json" > tmp-config.json && mv tmp-config.json "./user_data/${{ inputs.config }}.json"
          jq '.api_server.username = "${{ secrets.USER_LOGIN }}"' "./user_data/${{ inputs.config }}.json" > tmp-config.json && mv tmp-config.json "./user_data/${{ inputs.config }}.json"
          jq '.api_server.password = "${{ secrets.USER_PASSWORD }}"' "./user_data/${{ inputs.config }}.json" > tmp-config.json && mv tmp-config.json "./user_data/${{ inputs.config }}.json"
          jq '.api_server.jwt_secret_key = "${{ secrets.JWT_SECRET_KEY }}"' "./user_data/${{ inputs.config }}.json" > tmp-config.json && mv tmp-config.json "./user_data/${{ inputs.config }}.json"
          jq '.api_server.ws_token = "${{ secrets.WS_TOKEN }}"' "./user_data/${{ inputs.config }}.json" > tmp-config.json && mv tmp-config.json "./user_data/${{ inputs.config }}.json"
          jq '.max_open_trades = ${{ inputs.max_open_trades }}' "./user_data/${{ inputs.config }}.json" > tmp-config.json && mv tmp-config.json "./user_data/${{ inputs.config }}.json"
          jq '.strategy.stoploss = ${{ inputs.stoploss }}' "./user_data/${{ inputs.config }}.json" > tmp-config.json && mv tmp-config.json "./user_data/${{ inputs.config }}.json"
      #------------------------------------------------------------
      # cancel_open_orders_on_exit
      #------------------------------------------------------------
      # - name: cancel_open_orders_on_exit
      #   run: |
      #     jq '.cancel_open_orders_on_exit = ${{ inputs.cancel_open_orders_on_exit }}' "./user_data/${{ inputs.config }}.json" > tmp-config.json && mv tmp-config.json "./user_data/${{ inputs.config }}.json"
      #------------------------------------------------------------
      # Telegram config
      #------------------------------------------------------------    
      # - name: Telegram
      #   env:
      #     TELEGRAM_CHAT_ID_TRADE01: ${{ secrets.TELEGRAM_CHAT_ID_TRADE01 }}
      #     TELEGRAM_CHAT_ID_TRADE02: ${{ secrets.TELEGRAM_CHAT_ID_TRADE02 }}
      #     TELEGRAM_CHAT_ID_TRADE03: ${{ secrets.TELEGRAM_CHAT_ID_TRADE03 }}
      #   run: |
      #     export TELEGRAM_CHAT_ID_NAME=$(echo "TELEGRAM_CHAT_ID_${{ inputs.env_name }}" | tr '[:lower:]' '[:upper:]')
      #     export TELEGRAM_CHAT_ID=${!TELEGRAM_CHAT_ID_NAME}
      #     echo TELEGRAM_CHAT_ID=$TELEGRAM_CHAT_ID
      #     jq '.telegram.token = "${{ secrets.TELEGRAM_TOKEN }}"' "./user_data/${{ inputs.config }}.json" > tmp-config.json && mv tmp-config.json "./user_data/${{ inputs.config }}.json"
      #     jq --arg key "$TELEGRAM_CHAT_ID" '.telegram.chat_id = $key' "./user_data/${{ inputs.config }}.json" > tmp-config.json && mv tmp-config.json "./user_data/${{ inputs.config }}.json"
      #     jq '.telegram.enabled = ${{ inputs.telegram }}' "./user_data/${{ inputs.config }}.json" > tmp-config.json && mv tmp-config.json "./user_data/${{ inputs.config }}.json"

      #------------------------------------------------------------
      # Production config
      #------------------------------------------------------------
      - name: Production config
        if: ${{ inputs.runtime_type == 'production' }}
        run: |
          jq '.dry_run = false' "./user_data/${{ inputs.config }}.json" > tmp-config.json && mv tmp-config.json "./user_data/${{ inputs.config }}.json"
          jq '.dry_run_wallet = 0' "./user_data/${{ inputs.config }}.json" > tmp-config.json && mv tmp-config.json "./user_data/${{ inputs.config }}.json"
      #------------------------------------------------------------
      # Dry run config
      #------------------------------------------------------------
      - name: Dry-run config
        if: ${{ inputs.runtime_type == 'dry-run' }}
        run: |
          jq '.dry_run = true' "./user_data/${{ inputs.config }}.json" > tmp-config.json && mv tmp-config.json "./user_data/${{ inputs.config }}.json"
          jq --arg key "${{ inputs.dry_run_wallet }}" '.dry_run_wallet = $key' "./user_data/${{ inputs.config }}.json" > tmp-config.json && mv tmp-config.json "./user_data/${{ inputs.config }}.json"
      #------------------------------------------------------------
      # Log config file
      #------------------------------------------------------------
      - name: Log config file
        run: |
          cat "./user_data/${{ inputs.config }}.json"
      #------------------------------------------------------------
      # Make ENV file
      #------------------------------------------------------------
      - name: Make ENV file
        run: |
          echo '' > ./trade/.env
          echo 'export DOMAIN=${{ secrets.REMOTE_SERVER }}' >> ./trade/.env
          echo 'export TRADE_NAME=${{ inputs.env_name }}' >> ./trade/.env
          echo 'export ENV_NAME=${{ inputs.env_name }}' >> ./trade/.env
          echo 'export STRATEGY=${{ inputs.strategy }}' >> ./trade/.env
          echo 'export CONFIG_NAME=${{ inputs.config }}' >> ./trade/.env
          echo 'export DRY_RUN_WALLET=${{ inputs.dry_run_wallet }}' >> ./trade/.env
          echo 'export RUNTIME_TYPE=${{ inputs.runtime_type }}' >> ./trade/.env
          chmod 777 ./trade/.env

      #------------------------------------------------------------
      # Copy to remote
      #------------------------------------------------------------
      - name: 📝 Copy to remote 📝
        run: |
          echo "Copy to remote $REMOTE_SERVER:/root/"
          ssh -o StrictHostKeyChecking=no -i ./id_rsa "$REMOTE_SERVER" "mkdir -p /root/trade/${{ inputs.env_name }}/user_data"
          rsync -avh -e "ssh -o StrictHostKeyChecking=no -i ./id_rsa" "./trade/" "$REMOTE_SERVER:/root/trade/${{ inputs.env_name }}"
          rsync -avh -e "ssh -o StrictHostKeyChecking=no -i ./id_rsa" "./user_data/" "$REMOTE_SERVER:/root/trade/${{ inputs.env_name }}/user_data"

      #------------------------------------------------------------
      # Stop
      #------------------------------------------------------------
      - name: 🛑 Stop 🛑
        run: |
          ssh -o StrictHostKeyChecking=no -i ./id_rsa "$REMOTE_SERVER" "cd /root/trade/${{ inputs.env_name }} && ./stop.sh"

      #------------------------------------------------------------
      # Trade or dry-run
      #------------------------------------------------------------
      - name: 💰 Trade ${{ inputs.runtime_type }} ${{ inputs.strategy }} ${{ inputs.config }} 💰
        if: ${{ inputs.behaviour == 'start' }}
        run: |
          echo Trade, strategy: ${{ inputs.strategy }}, config: ${{ inputs.config }}
          ssh -o StrictHostKeyChecking=no -i ./id_rsa "$REMOTE_SERVER" "cd /root/trade/${{ inputs.env_name }} && ./trade.sh"